<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: octopress | matti's home]]></title>
  <link href="http://sudolee.github.io/blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://sudolee.github.io/"/>
  <updated>2014-04-24T21:10:00+08:00</updated>
  <id>http://sudolee.github.io/</id>
  <author>
    <name><![CDATA[Matti Lee]]></name>
    <email><![CDATA[desoxydate@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[自定义octopress博客master分支的git提交信息]]></title>
    <link href="http://sudolee.github.io/blog/2014/04/23/customgitcommitmessage4masterbranch/"/>
    <updated>2014-04-23T00:47:09+08:00</updated>
    <id>http://sudolee.github.io/blog/2014/04/23/customgitcommitmessage4masterbranch</id>
    <content type="html"><![CDATA[<p><em>octopress提供了快速部署blog的方法，但是在deploy时发现所提交的信息每次都一样，不利于从log上直观的查看提交历史。</em></p>

<!--more-->


<h2>idea</h2>

<p>本来打算从rake命令行给传递参数，但是google了一下，不的要领。所以&hellip;因为自己对ruby不了解，所以想到从Makefile入手(本来已经给source分支添加了Makefile以方便操作), 将log写入文件。然后从rakefile里面获取Makefile的结果。</p>

<h2>在Makefile里创建log</h2>

<p>``` makefile</p>

<h1>Makefile</h1>

<p>deploy:</p>

<pre><code>$(shell [ ! -d _deploy ] &amp;&amp; git clone --single-branch https://github.com/sudolee/sudolee.github.io.git _deploy)
@ [[ -n $$MSG ]] || { echo 'Pls set git commit message via: make deploy MSG="some commit"'; exit 1; }
echo "${MSG}" &gt; .mygitcommitmsg
bundle exec rake deploy
</code></pre>

<p><code>``
这段代码检查makefile命令行所传递的message，如果没有就报错退出。
如果MSG被传递进来就将其输出到本地文件</code>.mygicommitmsg`。</p>

<h2>在Rakefile里读取log</h2>

<p><code>diff
-    puts "\n## Committing: Site updated at #{Time.now.utc}"
-    message = "Site updated at #{Time.now.utc}"
+    if File.exist?("../.mygitcommitmsg")
+      fgitcommitmsg = File.new("../.mygitcommitmsg")
+      message = fgitcommitmsg.read
+    else
+      message = "site updated (at) #{Time.now.utc}"
+    end
+    puts "\n## Committing: #{message}"
</code>
* rakefile在执行deploy task的时候会cd到<code>_deploy</code>目录，所以需要指定上层目录<br/>
<strong>Note:</strong> 如果在创建的时候直接保存到<code>_deploy</code>目录，在<code>rake deploy</code>的时候会一起被提交。
* 从<code>.mygitcommitmsg</code>文件读取之前写入的log</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为你的blog添加评论模块]]></title>
    <link href="http://sudolee.github.io/blog/2014/04/21/add-comment-module-for-your-blog/"/>
    <updated>2014-04-21T20:38:55+08:00</updated>
    <id>http://sudolee.github.io/blog/2014/04/21/add-comment-module-for-your-blog</id>
    <content type="html"><![CDATA[<p>有了评论模块，你就可以和志同道合的人一起讨论，也是获取观众建议的快捷方式。这里提供两种评论模块的配置方法：<a href="https://disqus.com/">https://disqus.com</a>和<a href="http://duoshuo.com/">http://duoshuo.com</a></p>

<!--more-->


<h2>disqus</h2>

<p><em>Disqus是一家第三方社会化评论系统，主要为网站主提供评论托管服务。octopress已经支持了disqus的评论模块(见：<code>octopress/.themes/themename/source/_includes/post/disqus_thread.html</code>)，只需要简单的设置就可以工作。</em></p>

<h3>在<a href="https://disqus.com/">https://disqus.com</a>注册</h3>

<p>注册disqus非常简单，只要有邮箱就可以。注册完成后，登录之。</p>

<h3>在disqus创建域名</h3>

<p>进入网址<a href="http://disqus.com/admin/create/">http://disqus.com/admin/create</a>。创建你的域名，<code>site name</code>和<code>disqus url</code>要保持一致，这个就是稍后在octopress配置文件_config.yml里的<code>disqus_short_name</code>.</p>

<h3>在_config.yml设置新的<code>disqus_short_name</code></h3>

<p>```</p>

<h1>_config.yml</h1>

<h1>Disqus Comments</h1>

<p>disqus_short_name: yourshortname
disqus_show_comment_count: false
<code>``
重新</code>rake generate`就可以看到包含评论模块的blog。</p>

<h2>多说</h2>

<p><a href="http://duoshuo.com/">多说</a>(WordPress)是一款追求极致体验的社会化评论框，可以用微博、QQ、人人、豆瓣等帐号登录并评论。因为它支持国内一些常用的社交网站，所以比较流行。</p>

<p><strong>注：</strong>多说网的注册这里不再累述。</p>

<h3>在多说网创建域名</h3>

<p>多说网域名的创建不太好找，它在这里<a href="http://duoshuo.com/create-site">http://duoshuo.com/create-site</a>，创建域名后就可以获取<code>short_name</code>.<br/>
<code>站点名称</code>和<code>多说域名</code>采用统一的字符串，如：<code>duoshuoshortname</code>，那么站点地址就设置为：<code>duoshuoshortname.com</code>。<br/>
这里的域名就是short_name。</p>

<h3>在_config.yml设置新的<code>duoshuo_short_name</code></h3>

<p>在<code>_config.yml</code>里添加多说<code>short_name</code>和多说评论开关。
```</p>

<h1>_config.yml</h1>

<h1>Duoshuo Comments</h1>

<p>duoshuo_comments: true
duoshuo_short_name: duoshuoshortname
```</p>

<h3>在每个post的页面添加多说模块</h3>

<ul>
<li><p>在<code>source/_layouts/post.html</code>添加如下代码:
<code>html
｛% if site.duoshuo_comments == true and site.duoshuo_short_name and page.comments == true %｝
&lt;section&gt;
  &lt;h1&gt;- Comments -&lt;/h1&gt;
  &lt;div id="comments" aria-live="polite"&gt;｛% include post/duoshuo.html %｝&lt;/div&gt;
&lt;/section&gt;
｛% endif %｝
</code>
这段代码检查<code>_config.yml</code>里<code>duoshuo_comments: true</code>和<code>duoshuo_short_name</code>如果被设置就包含后面的网页<code>post/duoshuo.html</code>.<br/>
<strong>注意:</strong> 这段代码里的"{&ldquo;和&rdquo;}&ldquo;都是中文字符，在实际代码中需要替换为英文字符。</p></li>
<li><p>创建<code>post/duoshuo.html</code>
``` js</p></li>
</ul>


<div class="ds-thread"></div>


<script type="text/javascript">
var duoshuoQuery = {short_name:"yourduoshuoshortname"};
    (function() {
        var ds = document.createElement('script');
        ds.type = 'text/javascript';ds.async = true;
        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';
        ds.charset = 'UTF-8';
        (document.getElementsByTagName('head')[0] 
         || document.getElementsByTagName('body')[0]).appendChild(ds);
    })();
</script>


<p><code>``
重新</code>rake generate`就可以看到包含评论模块的blog。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用GithubPages和octopress部署blog]]></title>
    <link href="http://sudolee.github.io/blog/2014/04/20/setup-githubpages-via-octopress/"/>
    <updated>2014-04-20T16:35:14+08:00</updated>
    <id>http://sudolee.github.io/blog/2014/04/20/setup-githubpages-via-octopress</id>
    <content type="html"><![CDATA[<p><em>一直想自己搭建一个blog，但又因购买域名和租用服务器之麻烦没有实现。最近看到github上推出了github page服务，于是跃跃欲试。之前对git和markdown比较熟悉，所以搭建起来也没什么困难。好吧，总算是个良好的开始。</em></p>

<!--more-->


<h2>github pages</h2>

<p><img src="https://pages.github.com/favicon.ico" alt="github" /><br/>
<code>github pages</code>可以用git托管blog的静态网页，还可以自定义域名。</p>

<h3>创建主页</h3>

<h4>创建个人/组织主页</h4>

<p>创建个人/组织主页需要创建新的仓库，并以<em>username</em>.github.io命名，<em>username</em>是你在github上的用户/组织名称。</p>

<h4>创建项目主页</h4>

<p>项目主页的创建只需要创建一个新的名为<code>gh-pages</code>的分支即可。
<strong>注</strong>: github提供了自动生成项目主页的方法，并提供了一些漂亮的模板可供选择。</p>

<p>参考: <a href="https://pages.github.com/">https://pages.github.com</a></p>

<h2>octopress</h2>

<p><img src="http://octopress.org/octopress-favicon.png" alt="octopress" /><br/>
octopress是基于Jekyll博客引擎的一个框架。官方定义为：<code>A blogging framework for hackers</code>，可以生成github pages的静态网页。
官方提供了详尽的<a href="http://octopress.org/docs/">文档</a>，这里只是记录配置的大致步骤。</p>

<h2>安装ruby &amp; git</h2>

<ul>
<li>ubuntu: apt-get install ruby git-core</li>
<li>archlinux: pacman -S ruby git</li>
</ul>


<h2>获取和安装Octopress</h2>

<p><code>
git clone git://github.com/imathis/octopress.git
cd octopress
</code></p>

<h3>安装octopress的依赖</h3>

<p><code>
gem install bundler
rbenv rehash    # If you use rbenv, rehash to be able to run the bundle command
bundle install
</code></p>

<h3>安装octopress的默认主题</h3>

<p><code>rake install</code></p>

<p><strong>注意:</strong> 我在archlinux上安装的时候因为本地的rake版本太新了，运行时出错。按照提示，在<code>rake install</code>前加上<code>bundle exec</code>前缀就能正常运行了。</p>

<h2>配置octopress</h2>

<p><code>octopress</code>的作者使得它的配置尽量的简单，大多数情况下只需要修改<code>_config.yml</code>和<code>Rakefile</code>就可以正常工作了。
<code>Rakefile</code>是blog部署相关的配置，除非使用<code>rsync</code>，否则不需要修改。</p>

<p><code>_config.yml</code>是<strong>jekyll</strong>的主要配置文件，<code>octopress</code>对其作了一些定制，其中有三大配置项：<code>Main Configs</code>， <code>Jekyll &amp; Plugins</code> 和 <code>3rd Party Settings</code>。
最基本的配置只需要修改<code>_config.yml</code>的以下字段就可以了：
<code>
url:                # For rewriting urls for RSS, etc
title:              # Used in the header and title tags
subtitle:           # A description used in the header
author:             # Your name, for RSS, Copyright, Metadata
email:
</code>
更多配置，请移步：<a href="http://octopress.org/docs/configuring/">Configuring Octopress</a></p>

<h2>将博客部署到github上</h2>

<h3>rake task for github pages</h3>

<p><code>rake setup_github_pages</code>
这个task会要求你输入github仓库的URL。如：<code>https://github.com/sudolee/sudolee.github.io.git</code>
这条命令将完成以下工作:</p>

<blockquote><p>要求你输入github pages的仓库url，并存储之。
将原来的octopress的git仓库重命名为<code>octopress</code>。
把你的github pages的仓库设置为默认的远程仓库<code>origin。
从当前分支</code>master<code>切换到</code>source<code>分支。
根据你的github pages仓库配置blog的url。
clone你的远程仓库到</code>_deploy`目录，用于部署你的blog。</p></blockquote>

<h3>生成静态网页</h3>

<ul>
<li>运行命令<code>rake generate</code>将以<code>source</code>为源，生成静态blog网页保存在<code>public</code>目录。
<strong>注：</strong> 如果你使用了比较新的rake，可能会提示<em>在你的命令前加上前缀<code>bundle exec</code>以解决问题</em>。</li>
</ul>


<h3>提交新主页</h3>

<ul>
<li>现在可以运行<code>rake deploy</code>将目录<code>public</code>里的网页copy到目录<code>_deploy</code>，并提交到你的github仓库，提交后就可以展现新的blog。</li>
<li>运行<code>rake preview</code>命令，可以在本地浏览器<code>http://127.0.0.1:4000</code>预览呈现效果。</li>
</ul>


<h2>开始写blog</h2>

<p>博文必须存放在目录 <code>source/_posts</code>，并以Jekyll的命名方式<code>YYYY-MM-DD-post-title.markdown</code>。
octopress提供了一些rake task，用来以正确的命名格式创建新的博文，并附件一些有用的yaml元数据。语法如下：
<code>rake new_post["title"]</code>
<code>title</code>是博文的主题，<code>new_post</code>会创建一个包含这个主题的文件。默认的扩展名是<code>markdown</code>，可以在<code>Rakefile</code>里配置不同的扩展名。
例如：
<code>rake new_post["用github pages和octopress部署blog"]</code>
运行这条命令将会在生成博文源文件：<code>source/_posts/2014-04-20-yong-github-pageshe-octopressbu-shu-blog.markdown</code></p>

<p>打开这个文件，可以看到像下面这样的yaml元数据(告诉jekyll博客引擎如何处理博文和页面)：</p>

<h2>```</h2>

<p>layout: post
title: &ldquo;用githubpages和octopress部署blog&rdquo;
date: 2014-04-20 16:24:59 +0800
comments: true</p>

<h2>categories: </h2>

<p>```
编辑这个文件，就可以撰写博文。完成后用小节<strong>将博客部署到github上</strong>的方法部署或预览博文。</p>

<p>更多内容，请移步：<a href="http://octopress.org/docs/blogging">Blogging Basics</a></p>
]]></content>
  </entry>
  
</feed>
